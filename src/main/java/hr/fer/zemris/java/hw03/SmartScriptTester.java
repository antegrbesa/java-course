package hr.fer.zemris.java.hw03;

import hr.fer.zemris.java.custom.scripting.elems.Element;
import hr.fer.zemris.java.custom.scripting.elems.ElementFunction;
import hr.fer.zemris.java.custom.scripting.nodes.DocumentNode;
import hr.fer.zemris.java.custom.scripting.nodes.EchoNode;
import hr.fer.zemris.java.custom.scripting.nodes.ForLoopNode;
import hr.fer.zemris.java.custom.scripting.nodes.Node;
import hr.fer.zemris.java.custom.scripting.nodes.TextNode;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParserException;


import java.nio.file.Files;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;

/**
 * Demonstration class for {@link SmartScriptParser} class.
 * A single argument is expected in command line which represents 
 * a path to a text file containing text for parsing.
 * @author Ante Grbesa
 *
 */
public class SmartScriptTester {
	/**
	 * This method runs once the program is run.
	 * @param args command line arguments
	 */
	@SuppressWarnings("unused")
	public static void main(String[] args) {
		if(args.length != 1) {
			System.out.println("Invalid number of arguments, was " + args.length);
			System.exit(1);
		}
		String filepath = args[0];
		String docBody = "";
		try {
			docBody = new String(
			        Files.readAllBytes(Paths.get(filepath)), 
			        StandardCharsets.UTF_8
					);
		} catch (IOException e1) {
			System.out.println("Invalid file. I/O error");
			System.exit(1);
		}

		SmartScriptParser parser = null;
		try {
			parser = new SmartScriptParser(docBody);
		} catch(SmartScriptParserException e) {
			System.out.println("Unable to parse document! " + e.getMessage());
			System.exit(-1);
		} catch(Exception e) {
			e.printStackTrace(System.err);
			System.out.println("If this line ever executes, you have failed this class!");
			System.exit(-1);
		}
		
		DocumentNode document = parser.getDocumentNode();
		String original = "";
		original = createOriginalDocumentBody(document);
		System.out.println(docBody);
		System.out.println();
		System.out.println("What follows is generated text from DocumentNode:");
		System.out.println();
		System.out.println(original);
		
		SmartScriptParser parser2 = new SmartScriptParser(original);
		DocumentNode document2 = parser2.getDocumentNode(); //must have the same structure as document
		
	
	}
	
	/**
	 * Creates text from DocumentNode generated by a parser.
	 * @param document where text is stored
	 * @return String representation of text in DocumentNode
	 */
	public static String createOriginalDocumentBody(Node document) {
		StringBuilder sb = new StringBuilder();
		
		for(int i = 0, n = document.numberOfChildren(); i < n; i++) {
			Node node = document.getChild(i);
			if(node instanceof ForLoopNode) {
				sb.append("{$FOR ");
				sb.append(((ForLoopNode) node).getVariable().asText() + " ");
				sb.append(((ForLoopNode) node).getStartExpression().asText() + " ");
				sb.append(((ForLoopNode) node).getEndExpression().asText() + " ");
				Element end =  ((ForLoopNode) node).getStepExpression();
				if(end != null) {
					sb.append(end.asText() + " ");
				}
				sb.append("$} ");
				sb.append(createOriginalDocumentBody(node));
				sb.append(" {$END$}");
				continue;
			}
			
			if(node instanceof EchoNode) {
				Element[] elements = ((EchoNode) node).getElements();
				sb.append("{$= ");
				for(Element e : elements) {
					if(e instanceof ElementFunction) {
						sb.append("@");
					}
					sb.append(e.asText() + " ");
				}
				sb.append("$}");
				continue;
			}
			
			if(node instanceof TextNode) {
				sb.append(((TextNode) node).getText());
				continue;
			}
		}
		
		return sb.toString();
	}

}
